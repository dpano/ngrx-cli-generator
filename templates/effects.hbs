import { inject } from '@angular/core';
import { Actions } from '@ngrx/effects';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as {{feature}}Actions from './{{feature}}.actions';

export const load{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.load{{className}}),
    mergeMap(() =>
      of([]).pipe(
        map(data => {{feature}}Actions.load{{className}}Success({ data })),
        catchError(error => of({{feature}}Actions.load{{className}}Failure({ error })))
      )
    )
  );
}, { functional: true });

export const create{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.create{{className}}),
    mergeMap(({ item }) =>
      of(item).pipe(
        map(created => {{feature}}Actions.create{{className}}Success({ item: created })),
        catchError(error => of({{feature}}Actions.create{{className}}Failure({ error })))
      )
    )
  );
}, { functional: true });

export const update{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.update{{className}}),
    mergeMap(({ item }) =>
      of(item).pipe(
        map(updated => {{feature}}Actions.update{{className}}Success({ item: updated })),
        catchError(error => of({{feature}}Actions.update{{className}}Failure({ error })))
      )
    )
  );
}, { functional: true });

export const delete{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.delete{{className}}),
    mergeMap(({ id }) =>
      of(id).pipe(
        map(() => {{feature}}Actions.delete{{className}}Success({ id })),
        catchError(error => of({{feature}}Actions.delete{{className}}Failure({ error })))
      )
    )
  );
}, { functional: true });

{{#if withPagination}}
export const loadPaged{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.loadPaged{{className}}),
    mergeMap(action =>
      of({ data: [], total: 0 }).pipe(
        map(({ data, total }) => {{feature}}Actions.loadPaged{{className}}Success({ data, total })),
        catchError(error => of({{feature}}Actions.loadPaged{{className}}Failure({ error })))
      )
    )
  );
}, { functional: true });
{{/if}}

{{#if withLoadOne}}
export const loadOne{{className}}Effect = createEffect(() => {
  const actions$ = inject(Actions);
  return actions$.pipe(
    ofType({{feature}}Actions.load{{className}}ById),
    mergeMap(action =>
      of({ id: action.id, name: 'One' }).pipe(
        map(item => {{feature}}Actions.load{{className}}ByIdSuccess({ item })),
        catchError(error => of({{feature}}Actions.load{{className}}ByIdFailure({ error })))
      )
    )
  );
}, { functional: true });
{{/if}}
