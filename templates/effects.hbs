import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import * as {{feature}}Actions from './{{feature}}.actions';
import { of } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';

@Injectable()
export class {{className}}Effects {
  load$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{feature}}Actions.load{{className}}),
      mergeMap(() =>
        of([]).pipe(
          map(data => {{feature}}Actions.load{{className}}Success({ data })),
          catchError(error => of({{feature}}Actions.load{{className}}Failure({ error })))
        )
      )
    )
  );

  {{#if withPagination}}
  loadPaged$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{feature}}Actions.loadPaged{{className}}),
      mergeMap(action =>
        of({ data: [], total: 0 }).pipe(
          map(({ data, total }) => {{feature}}Actions.loadPaged{{className}}Success({ data, total })),
          catchError(error => of({{feature}}Actions.loadPaged{{className}}Failure({ error })))
        )
      )
    )
  );
  {{/if}}

  {{#if withLoadOne}}
  loadOne$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{feature}}Actions.load{{className}}ById),
      mergeMap(action =>
        of({ id: action.id, name: 'One' }).pipe(
          map(item => {{feature}}Actions.load{{className}}ByIdSuccess({ item })),
          catchError(error => of({{feature}}Actions.load{{className}}ByIdFailure({ error })))
        )
      )
    )
  );
  {{/if}}

  constructor(private actions$: Actions) {}
}
